plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.2'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'net.andreho.spring'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.11.4')
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

ext {
    set('springModulithVersion', "1.3.1")
    set('releaseTrainVersion', '2024.0.0')
}

dependencyManagement {
    imports {
    }
}
dependencies {
    //implementation platform('org.springframework.cloud:spring-cloud-dependencies:2024.0.0')
    //implementation platform('org.springframework.cloud:spring-cloud-sleuth-otel-dependencies:1.1.4')
    implementation platform("org.springframework.cloud:spring-cloud-dependencies:${releaseTrainVersion}")
    implementation platform("io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom:2.12.0")
    implementation platform('io.micrometer:micrometer-bom:1.14.3')

    implementation "org.springframework.boot:spring-boot-starter-aop"

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    implementation("io.opentelemetry.instrumentation:opentelemetry-spring-boot-starter")
    implementation 'io.opentelemetry.instrumentation:opentelemetry-logback-appender-1.0:2.12.0-alpha'
    implementation("io.opentelemetry.contrib:opentelemetry-samplers:1.33.0-alpha")

    implementation 'io.micrometer:micrometer-tracing'
    implementation 'io.micrometer:micrometer-registry-otlp'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'io.micrometer:micrometer-registry-prometheus-simpleclient'
    // implementation 'io.micrometer:micrometer-tracing-bridge-otel'
    implementation 'io.micrometer:micrometer-tracing-bridge-brave'
    implementation 'io.zipkin.contrib.otel:encoder-brave:0.1.0'
    runtimeOnly 'com.github.loki4j:loki-logback-appender:1.5.1'

    implementation 'org.springframework.modulith:spring-modulith-starter-core'
    implementation 'org.springframework.modulith:spring-modulith-starter-mongodb'
    //implementation 'io.prometheus:simpleclient_pushgateway:0.16.0'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    runtimeOnly 'io.micrometer:micrometer-registry-otlp'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
    runtimeOnly 'org.springframework.modulith:spring-modulith-actuator'
    runtimeOnly 'org.springframework.modulith:spring-modulith-observability'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:mongodb'
    testImplementation 'io.projectreactor:reactor-test'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.springframework.modulith:spring-modulith-starter-test'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
}


dependencyManagement {
    imports {
        mavenBom "org.springframework.modulith:spring-modulith-bom:${springModulithVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}